
replicaCount: 1

service:
  port: 8443


ingress:
  service:
    enabled: true
    className: MOCK_SERVICE_VALUE
    serviceDomain: MOCK_SERVICE_URL
    hosts:
      - host: APP_OVERRIDE_DOMAIN
        paths:
        - /auth/realms/kmrealm
    tls:
      enable: true


configuration:
  image:
    tag: 11.0.3
    repository: quay.io/keycloak/keycloak
  realm: kmrealm
  protocol: https
  host: keycloak
  adminUser: admin
  adminPasswd: admin
  port: 8443
  masterRealm: master
  path: /auth
  identityProviders:
    - name: azure-km
      mappers:
        - name: "userId"
          type: "oidc-user-attribute-idp-mapper"
          syncMode: FORCE
          claim: oid
          userAttribute: externalId
        - name: identityOrigin
          type: hardcoded-attribute-idp-mapper
          value: m365
          syncMode: FORCE
          attribute: identityOrigin
        - name: "identityTid"
          type: "oidc-user-attribute-idp-mapper"
          syncMode: FORCE
          claim: tid
          userAttribute: identityTid
    - name: azure-km-dwp
      mappers:
        - name: "userId"
          type: "oidc-user-attribute-idp-mapper"
          syncMode: FORCE
          claim: oid
          userAttribute: externalId
        - name: identityOrigin
          type: hardcoded-attribute-idp-mapper
          value: m365
          syncMode: FORCE
          attribute: identityOrigin
        - name: "identityTid"
          type: "oidc-user-attribute-idp-mapper"
          syncMode: FORCE
          claim: tid
          userAttribute: identityTid
  retry:
    delay: 15000
    count: 30

cert:
  enabled: true
  secretName: sso-x509-https-secret
  issuerKind: ClusterIssuer
  issuer: k8s-cluster
  duration: 8760h0m0s
  renewBefore: 360h0m0s

keycloak:
  name: auth-server
  application: sui
  istancences: 1
  externalAccess:
    enabled: False

clients:
  - name: sui
    realm: kmrealm
    client:
      {
        "clientId": "sui",
        "surrogateAuthRequired": false,
        "enabled": true,
        "clientAuthenticatorType": "client-secret",
        "secret": "ad4ca606-1472-4db5-b1b9-53e9fe90609b",
        "redirectUris": [
          "http://localhost:8080/*",
          "sui://*"
        ],
        "webOrigins": [
          "http://localhost:8080",
          "sui://application"
        ],
        "notBefore": 0,
        "bearerOnly": false,
        "consentRequired": false,
        "standardFlowEnabled": true,
        "implicitFlowEnabled": false,
        "directAccessGrantsEnabled": true,
        "serviceAccountsEnabled": false,
        "publicClient": true,
        "frontchannelLogout": false,
        "protocol": "openid-connect",
        "protocolMappers": [
          {
            "name": "origin.externalId",
            "protocol": "openid-connect",
            "protocolMapper": "oidc-usermodel-attribute-mapper",
            "consentRequired": false,
            "config": {
              "userinfo.token.claim": "true",
              "user.attribute": "externalId",
              "id.token.claim": "true",
              "access.token.claim": "true",
              "claim.name": "origin.oid",
              "jsonType.label": "String"
            }
          },
          {
            "name": "origin",
            "protocol": "openid-connect",
            "protocolMapper": "oidc-hardcoded-claim-mapper",
            "consentRequired": false,
            "config": {
              "id.token.claim": "true",
              "access.token.claim": "true",
              "claim.name": "origin",
              "jsonType.label": "JSON",
              "userinfo.token.claim": "true"
            }
          },
          {
            "name": "origin.idp",
            "protocol": "openid-connect",
            "protocolMapper": "oidc-usermodel-attribute-mapper",
            "consentRequired": false,
            "config": {
              "userinfo.token.claim": "true",
              "user.attribute": "identityOrigin",
              "id.token.claim": "true",
              "access.token.claim": "true",
              "claim.name": "origin.idp",
              "jsonType.label": "String"
            }
          },
          {
            "name": "origin.tid",
            "protocol": "openid-connect",
            "protocolMapper": "oidc-usermodel-attribute-mapper",
            "consentRequired": false,
            "config": {
              "userinfo.token.claim": "true",
              "user.attribute": "identityTid",
              "id.token.claim": "true",
              "access.token.claim": "true",
              "claim.name": "origin.tid",
              "jsonType.label": "String"
            }
          }
        ],
        "attributes": {
          "saml.assertion.signature": "false",
          "saml.force.post.binding": "false",
          "saml.multivalued.roles": "false",
          "saml.encrypt": "false",
          "saml.server.signature": "false",
          "saml.server.signature.keyinfo.ext": "false",
          "exclude.session.state.from.auth.response": "false",
          "saml_force_name_id_format": "false",
          "saml.client.signature": "false",
          "tls.client.certificate.bound.access.tokens": "false",
          "saml.authnstatement": "false",
          "display.on.consent.screen": "false",
          "saml.onetimeuse.condition": "false"
        },
        "fullScopeAllowed": true,
        "nodeReRegistrationTimeout": -1,
        "defaultClientScopes": [
          "web-origins",
          "role_list",
          "profile",
          "roles",
          "email"
        ],
        "optionalClientScopes": [
          "address",
          "phone",
          "offline_access",
          "microprofile-jwt"
        ]
      }
  - name: grafana
    realm: cspadmin
    client:
      {
        "clientId": "grafana",
        "rootUrl": "http://grafana.monitoring.svc.cluster.local:3000/",
        "adminUrl": "http://grafana.monitoring.svc.cluster.local:3000",
        "surrogateAuthRequired": false,
        "enabled": true,
        "clientAuthenticatorType": "client-secret",
        "secret": "7721f50e-f57d-490f-ae93-e53a79f5408e",
        "redirectUris": [
            "http://grafana.monitoring.svc.cluster.local:3000/*"
        ],
        "webOrigins": [
            "http://grafana.monitoring.svc.cluster.local:3000"
        ],
        "notBefore": 0,
        "bearerOnly": false,
        "consentRequired": false,
        "standardFlowEnabled": true,
        "implicitFlowEnabled": false,
        "directAccessGrantsEnabled": true,
        "serviceAccountsEnabled": false,
        "publicClient": false,
        "frontchannelLogout": false,
        "protocol": "openid-connect",
        "attributes": {
          "saml.assertion.signature": "false",
          "saml.multivalued.roles": "false",
          "saml.force.post.binding": "false",
          "saml.encrypt": "false",
          "saml.server.signature": "false",
          "saml.server.signature.keyinfo.ext": "false",
          "exclude.session.state.from.auth.response": "false",
          "saml_force_name_id_format": "false",
          "saml.client.signature": "false",
          "tls.client.certificate.bound.access.tokens": "false",
          "saml.authnstatement": "false",
          "display.on.consent.screen": "false",
          "saml.onetimeuse.condition": "false"
        }
      }
  - name: rabbitmq
    realm: cspadmin
    client:
      {
        "clientId": "rabbitmq",
        "rootUrl": "http://grafana.monitoring.svc.cluster.local:3000/",
        "adminUrl": "http://grafana.monitoring.svc.cluster.local:3000",
        "surrogateAuthRequired": false,
        "enabled": true,
        "clientAuthenticatorType": "client-secret",
        "secret": "2af6562f-98a7-4017-9061-b7a58ebf8a73",
        "redirectUris": [
            "http://grafana.monitoring.svc.cluster.local:3000/*"
        ],
        "webOrigins": [
            "http://grafana.monitoring.svc.cluster.local:3000"
        ],
        "notBefore": 0,
        "bearerOnly": false,
        "consentRequired": false,
        "standardFlowEnabled": true,
        "implicitFlowEnabled": false,
        "directAccessGrantsEnabled": true,
        "serviceAccountsEnabled": false,
        "publicClient": false,
        "frontchannelLogout": false,
        "protocol": "openid-connect",
        "attributes": {
          "saml.assertion.signature": "false",
          "saml.multivalued.roles": "false",
          "saml.force.post.binding": "false",
          "saml.encrypt": "false",
          "saml.server.signature": "false",
          "saml.server.signature.keyinfo.ext": "false",
          "exclude.session.state.from.auth.response": "false",
          "saml_force_name_id_format": "false",
          "saml.client.signature": "false",
          "tls.client.certificate.bound.access.tokens": "false",
          "saml.authnstatement": "false",
          "display.on.consent.screen": "false",
          "saml.onetimeuse.condition": "false"
        }
    }
  - name: argocd
    realm: cspadmin
    client:
      {
        "clientId": "argocd",
        "rootUrl": "http://grafana.monitoring.svc.cluster.local:3000/",
        "adminUrl": "http://grafana.monitoring.svc.cluster.local:3000",
        "surrogateAuthRequired": false,
        "enabled": true,
        "clientAuthenticatorType": "client-secret",
        "secret": "faa80e83-820f-45e4-941c-832a8081385f",
        "redirectUris": [
            "http://grafana.monitoring.svc.cluster.local:3000/*"
        ],
        "webOrigins": [
            "http://grafana.monitoring.svc.cluster.local:3000"
        ],
        "notBefore": 0,
        "bearerOnly": false,
        "consentRequired": false,
        "standardFlowEnabled": true,
        "implicitFlowEnabled": false,
        "directAccessGrantsEnabled": true,
        "serviceAccountsEnabled": false,
        "publicClient": false,
        "frontchannelLogout": false,
        "protocol": "openid-connect",
        "attributes": {
          "saml.assertion.signature": "false",
          "saml.multivalued.roles": "false",
          "saml.force.post.binding": "false",
          "saml.encrypt": "false",
          "saml.server.signature": "false",
          "saml.server.signature.keyinfo.ext": "false",
          "exclude.session.state.from.auth.response": "false",
          "saml_force_name_id_format": "false",
          "saml.client.signature": "false",
          "tls.client.certificate.bound.access.tokens": "false",
          "saml.authnstatement": "false",
          "display.on.consent.screen": "false",
          "saml.onetimeuse.condition": "false"
        }
      }
  - name: jaeger
    realm: cspadmin
    client:
      {
        "clientId": "jaeger",
        "rootUrl": "http://grafana.monitoring.svc.cluster.local:3000/",
        "adminUrl": "http://grafana.monitoring.svc.cluster.local:3000",
        "surrogateAuthRequired": false,
        "enabled": true,
        "clientAuthenticatorType": "client-secret",
        "secret": "635c7493-cb0e-4cd9-99c4-aa7a19f805f2",
        "redirectUris": [
            "http://grafana.monitoring.svc.cluster.local:3000/*"
        ],
        "webOrigins": [
            "http://grafana.monitoring.svc.cluster.local:3000"
        ],
        "notBefore": 0,
        "bearerOnly": false,
        "consentRequired": false,
        "standardFlowEnabled": true,
        "implicitFlowEnabled": false,
        "directAccessGrantsEnabled": true,
        "serviceAccountsEnabled": false,
        "publicClient": false,
        "frontchannelLogout": false,
        "protocol": "openid-connect",
        "attributes": {
          "saml.assertion.signature": "false",
          "saml.multivalued.roles": "false",
          "saml.force.post.binding": "false",
          "saml.encrypt": "false",
          "saml.server.signature": "false",
          "saml.server.signature.keyinfo.ext": "false",
          "exclude.session.state.from.auth.response": "false",
          "saml_force_name_id_format": "false",
          "saml.client.signature": "false",
          "tls.client.certificate.bound.access.tokens": "false",
          "saml.authnstatement": "false",
          "display.on.consent.screen": "false",
          "saml.onetimeuse.condition": "false"
        }
      }
  - name: elastic
    realm: cspadmin
    client:
      {
        "clientId": "elastic",
        "rootUrl": "http://grafana.monitoring.svc.cluster.local:3000/",
        "adminUrl": "http://grafana.monitoring.svc.cluster.local:3000",
        "surrogateAuthRequired": false,
        "enabled": true,
        "clientAuthenticatorType": "client-secret",
        "secret": "f469d692-5f32-4312-b16a-512b0af83317",
        "redirectUris": [
            "http://grafana.monitoring.svc.cluster.local:3000/*"
        ],
        "webOrigins": [
            "http://grafana.monitoring.svc.cluster.local:3000"
        ],
        "notBefore": 0,
        "bearerOnly": false,
        "consentRequired": false,
        "standardFlowEnabled": true,
        "implicitFlowEnabled": false,
        "directAccessGrantsEnabled": true,
        "serviceAccountsEnabled": false,
        "publicClient": false,
        "frontchannelLogout": false,
        "protocol": "openid-connect",
        "attributes": {
          "saml.assertion.signature": "false",
          "saml.multivalued.roles": "false",
          "saml.force.post.binding": "false",
          "saml.encrypt": "false",
          "saml.server.signature": "false",
          "saml.server.signature.keyinfo.ext": "false",
          "exclude.session.state.from.auth.response": "false",
          "saml_force_name_id_format": "false",
          "saml.client.signature": "false",
          "tls.client.certificate.bound.access.tokens": "false",
          "saml.authnstatement": "false",
          "display.on.consent.screen": "false",
          "saml.onetimeuse.condition": "false"
        }
      }
  - name: graphdb
    realm: cspadmin
    client:
      {
        "clientId": "graphdb",
        "rootUrl": "http://grafana.monitoring.svc.cluster.local:3000/",
        "adminUrl": "http://grafana.monitoring.svc.cluster.local:3000",
        "surrogateAuthRequired": false,
        "enabled": true,
        "clientAuthenticatorType": "client-secret",
        "secret": "ae46e200-960c-45c8-8eff-2e3f0e1b4f8e",
        "redirectUris": [
            "http://grafana.monitoring.svc.cluster.local:3000/*"
        ],
        "webOrigins": [
            "http://grafana.monitoring.svc.cluster.local:3000"
        ],
        "notBefore": 0,
        "bearerOnly": false,
        "consentRequired": false,
        "standardFlowEnabled": true,
        "implicitFlowEnabled": false,
        "directAccessGrantsEnabled": true,
        "serviceAccountsEnabled": false,
        "publicClient": false,
        "frontchannelLogout": false,
        "protocol": "openid-connect",
        "attributes": {
          "saml.assertion.signature": "false",
          "saml.multivalued.roles": "false",
          "saml.force.post.binding": "false",
          "saml.encrypt": "false",
          "saml.server.signature": "false",
          "saml.server.signature.keyinfo.ext": "false",
          "exclude.session.state.from.auth.response": "false",
          "saml_force_name_id_format": "false",
          "saml.client.signature": "false",
          "tls.client.certificate.bound.access.tokens": "false",
          "saml.authnstatement": "false",
          "display.on.consent.screen": "false",
          "saml.onetimeuse.condition": "false"
        }
      }
  - name: frontend
    realm: cspadmin
    client:
      {
        "clientId": "frontend",
        "rootUrl": "http://grafana.monitoring.svc.cluster.local:3000/",
        "adminUrl": "http://grafana.monitoring.svc.cluster.local:3000",
        "surrogateAuthRequired": false,
        "enabled": true,
        "clientAuthenticatorType": "client-secret",
        "secret": "149c5bdc-6d67-4716-96ea-da7565f66bdf",
        "redirectUris": [
            "http://grafana.monitoring.svc.cluster.local:3000/*"
        ],
        "webOrigins": [
            "http://grafana.monitoring.svc.cluster.local:3000"
        ],
        "notBefore": 0,
        "bearerOnly": false,
        "consentRequired": false,
        "standardFlowEnabled": true,
        "implicitFlowEnabled": false,
        "directAccessGrantsEnabled": true,
        "serviceAccountsEnabled": false,
        "publicClient": false,
        "frontchannelLogout": false,
        "protocol": "openid-connect",
        "attributes": {
          "saml.assertion.signature": "false",
          "saml.multivalued.roles": "false",
          "saml.force.post.binding": "false",
          "saml.encrypt": "false",
          "saml.server.signature": "false",
          "saml.server.signature.keyinfo.ext": "false",
          "exclude.session.state.from.auth.response": "false",
          "saml_force_name_id_format": "false",
          "saml.client.signature": "false",
          "tls.client.certificate.bound.access.tokens": "false",
          "saml.authnstatement": "false",
          "display.on.consent.screen": "false",
          "saml.onetimeuse.condition": "false"
        }
      }

users:
  - name: operator
    realm: cspadmin
    user:
      username: "operator"
      firstName: "operator"
      lastName: "speriamochefunzioni"
      email: "operator@speriamochefunzioni.org"
      enabled: True
      credentials:
        - type: "password"
          value: "12345"

realms:
  # don't use special char for name, id, realm and displayName
  - name: cspadmin
    id: cspadmin
    realm: cspadmin
    displayName: CSPAdmin
    enabled: True
    identityProviders:
      [

      ]
  - name: kmrealm
    id: kmrealm
    realm: kmrealm
    displayName: kmrealm
    enabled: True
    identityProviders:
      [
        {
          "alias": "azure-km",
          "displayName": "azure-km",
          "providerId": "oidc",
          "enabled": true,
          "trustEmail": false,
          "storeToken": true,
          "addReadTokenRoleOnCreate": true,
          "linkOnly": false,
          "firstBrokerLoginFlowAlias": "first broker login",
          "config": {
            "userInfoUrl": "https://graph.microsoft.com/oidc/userinfo",
            "clientId": "e3d5abfd-2b8f-4861-8a5b-1b6d442a834a",
            "tokenUrl": "https://login.microsoftonline.com/17f69c66-2114-4826-9fb1-6e496607aebc/oauth2/v2.0/token",
            "backchannelSupported": "true",
            "useJwksUrl": "true",
            "loginHint": "true",
            "authorizationUrl": "https://login.microsoftonline.com/17f69c66-2114-4826-9fb1-6e496607aebc/oauth2/v2.0/authorize",
            "clientAuthMethod": "client_secret_basic",
            "disableUserInfo": "false",
            "logoutUrl": "https://login.microsoftonline.com/17f69c66-2114-4826-9fb1-6e496607aebc/oauth2/v2.0/logout",
            "syncMode": "IMPORT",
            "clientSecret": "DR0VNz2w_A_-T~4EvT1_z6d_2T_yzS5cFy",
            "defaultScope": "openid profile email offline_access User.Read",
            "guiOrder": "1"
          }
        },
        {
          "alias": "azure-km-dwp",
          "displayName": "azure-km-dwp",
          "providerId": "oidc",
          "enabled": true,
          "trustEmail": false,
          "storeToken": true,
          "addReadTokenRoleOnCreate": true,
          "linkOnly": false,
          "firstBrokerLoginFlowAlias": "first broker login",
          "config": {
            "userInfoUrl": "https://graph.microsoft.com/oidc/userinfo",
            "clientId": "14fc2c0d-2864-48d5-b7b7-32f83ef550cf",
            "tokenUrl": "https://login.microsoftonline.com/9496ba52-13ea-4d20-992b-326838511cfe/oauth2/v2.0/token",
            "backchannelSupported": "true",
            "useJwksUrl": "true",
            "loginHint": "true",
            "authorizationUrl": "https://login.microsoftonline.com/9496ba52-13ea-4d20-992b-326838511cfe/oauth2/v2.0/authorize",
            "clientAuthMethod": "client_secret_basic",
            "disableUserInfo": "false",
            "logoutUrl": "https://login.microsoftonline.com/9496ba52-13ea-4d20-992b-326838511cfe/oauth2/v2.0/logout",
            "syncMode": "IMPORT",
            "clientSecret": "T4LFlp4ZznCIw7~4bFTwR25_L._47H14KL",
            "defaultScope": "openid profile email offline_access User.Read Files.Read Sites.Read.All",
            "guiOrder": "1"
          }
        }
      ]
postgresql:
  # If `true`, the Postgresql dependency is enabled
  enabled: false
  # PostgreSQL User to create
  postgresqlUsername: keycloak
  # PostgreSQL Password for the new user
  postgresqlPassword: keycloak
  # PostgreSQL Database to create
  postgresqlDatabase: keycloak
  # PostgreSQL network policy configuration
  networkPolicy:
    enabled: false