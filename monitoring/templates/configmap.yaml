---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
data:
  prometheus.rules: |-
    groups:
    - name: devopscube demo alert
      rules:
      - alert: High Pod Meory
        expr: sum(container_memory_usage_bytes) > 1
        for: 1m
        labels:
          severity: slack
        annotations:
          summary: High Memory Usage

  prometheus.yml: |-
    # my global config
    global:
      scrape_interval:     30s # Set the scrape interval to every 15 seconds. Default is every 1 minute.
      evaluation_interval: 30s # Evaluate rules every 15 seconds. The default is every 1 minute.
      # scrape_timeout is set to the global default (10s).

    rule_files:
      - /etc/prometheus/prometheus.rules

    # A scrape configuration containing exactly one endpoint to scrape:
    # Here it's Prometheus itself.
    scrape_configs:
    - job_name: kubernetes-nodes-cadvisor
      scrape_interval: 30s
      scrape_timeout: 30s
      scheme: https  # remove if you want to scrape metrics on insecure port
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      kubernetes_sd_configs:
        - role: node
      relabel_configs:
        - action: labelmap
          regex: __meta_kubernetes_node_label_(.+)
        # Only for Kubernetes ^1.7.3.
        # See: https://github.com/prometheus/prometheus/issues/2916
        - target_label: __address__
          replacement: kubernetes.default.svc:443
        - source_labels: [__meta_kubernetes_node_name]
          regex: (.+)
          target_label: __metrics_path__
          replacement: /api/v1/nodes/${1}/proxy/metrics/cadvisor
      metric_relabel_configs:
        - action: replace
          source_labels: [id]
          regex: '^/machine\.slice/machine-rkt\\x2d([^\\]+)\\.+/([^/]+)\.service$'
          target_label: rkt_container_name
          replacement: '${2}-${1}'
        - action: replace
          source_labels: [id]
          regex: '^/system\.slice/(.+)\.service$'
          target_label: systemd_service_name
          replacement: '${1}'

    - job_name: ch-rabbitmq
      metrics_path: {{ default "/metrics" .Values.rabbitmq.metrics }}
      scrape_interval: 30s
      scrape_timeout: 30s
      kubernetes_sd_configs:
      - role: service
      basic_auth:
        username: {{ default .Values.rabbitmq.username .Values.global.rabbitmq.username}}
        password: {{ default .Values.rabbitmq.password .Values.global.rabbitmq.password}}
      relabel_configs:
        # get only services annotated as rabbitmq
        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_rabbitmq]
          regex: true
          action: keep
        # filter out service port - I need only port for management which is 15672
        - source_labels: [__address__]
          regex: (.*):{{ .Values.rabbitmq.servicePort }}
          action: drop
        - source_labels: [__address__]
          regex: (.*):{{ .Values.rabbitmq.mgmtPort }}
          action: drop
        - source_labels: [__meta_kubernetes_namespace]
          target_label: namespace
        - source_labels: [__meta_kubernetes_service_name]
          target_label: service
        - source_labels: [__address__]
          regex: (.*)(:{{ .Values.rabbitmq.metricsPort }})?
          target_label: __param_target
          replacement: ${1}{{ default "/metrics" .Values.rabbitmq.metrics }}
        - source_labels: [__param_target]
          regex: (.*)
          target_label: instance
          replacement: ${1}

    - job_name: health-check
      metrics_path: /probe
      scheme: http
      params:
        module: [http_2xx]  # Look for a HTTP 200 response.
      kubernetes_sd_configs:
      - role: service
      relabel_configs:
        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_healthcheck]
          regex: true
          action: keep
        - source_labels: [__meta_kubernetes_namespace]
          target_label: namespace
        - source_labels: [__tmp_health_url]
          replacement: 'health'
          target_label: __tmp_health_url
        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_healthcheckurl]
          regex: (.+)
          target_label: __tmp_health_url
        - source_labels: [__address__,__tmp_health_url]
          separator: '/'
          target_label: __param_target
        - target_label: __address__
          replacement: prometheus-blackbox-exporter:9115
        - source_labels: [__param_target]
          target_label: instance
        - action: labelmap
          regex: __meta_kubernetes_service_label_(.+)
        - source_labels: [__meta_kubernetes_service_name]
          target_label: service

    - job_name: node-exporter
      metrics_path: /metrics
      scrape_interval: 30s
      scrape_timeout: 30s
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_node]
          action: keep
          regex: true
        - action: labelmap
          regex: __meta_kubernetes_pod_label_(.+)
        - source_labels: [__meta_kubernetes_namespace]
          action: replace
          target_label: kubernetes_namespace
        - source_labels: [__meta_kubernetes_pod_name]
          action: replace
          target_label: kubernetes_pod_name

    - job_name: 'kubernetes-pods'
      kubernetes_sd_configs:
        - role: pod
      relabel_configs:
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
          action: keep
          regex: true
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
          action: replace
          target_label: __metrics_path__
          regex: (.+)
        - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
          action: replace
          regex: ([^:]+)(?::\d+)?;(\d+)
          replacement: $1:$2
          target_label: __address__
        - action: labelmap
          regex: __meta_kubernetes_pod_label_(.+)
        - source_labels: [__meta_kubernetes_namespace]
          action: replace
          target_label: kubernetes_namespace
        - source_labels: [__meta_kubernetes_pod_name]
          action: replace
          target_label: kubernetes_pod_name

    - job_name: service-metrics
      metrics_path: /metrics
      scrape_interval: 30s
      scrape_timeout: 30s
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_metrics]
          regex: true
          action: keep
        - source_labels: [__meta_kubernetes_namespace]
          target_label: namespace
        - source_labels: [__tmp_port]
          replacement: '8080'
          target_label: __tmp_port
        - source_labels: [__tmp_metrics_url]
          replacement: 'metrics'
          target_label: __tmp_metrics_url
        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_metricsurl]
          regex: (.+)
          target_label: __tmp_metrics_url
        - source_labels: [__address__,__tmp_port]
          separator: ':'
          target_label: __address__
        - source_labels: [__address__,__tmp_metrics_url]
          separator: '/'
          target_label: __address__
        - source_labels: [__address__]
          target_label: instance

    - job_name: push_gateway
      metrics_path: /metrics
      scrape_interval: 30s
      scrape_timeout: 30s
      kubernetes_sd_configs:
      - role: service
      relabel_configs:
        # get only services annotated as push_gateway
        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_push_gateway]
          regex: true
          action: keep
        - source_labels: [__meta_kubernetes_namespace]
          target_label: namespace
        - source_labels: [__meta_kubernetes_service_name]
          target_label: service
        - source_labels: [__address__]
          regex: (.*)(:9091)?
          target_label: __param_target
          replacement: ${1}/metrics
        - source_labels: [__param_target]
          regex: (.*)
          target_label: instance
          replacement: ${1}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-blackbox-exporter-config
data:
  blackbox.yml: |
    modules:
      http_2xx:
        prober: http
        timeout: 5s
        http:
          protocol: "tcp4"
          preferred_ip_protocol: "ip4"
          valid_status_codes: []  # Defaults to 2xx
          method: GET
          headers: {}
          no_follow_redirects: false
          fail_if_ssl: false
          fail_if_not_ssl: false
          fail_if_matches_regexp: []
          fail_if_not_matches_regexp: []
---
